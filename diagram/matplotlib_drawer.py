# -*- coding: utf-8 -*-
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import matplotlib.patches as mpatches


genome_len = {
	'0001': 167267,
	'0005': 143963,
	'0007': 182913,
	'0008': 131520,
	'0009': 150157,
	'0010': 176473,
	'0011': 159635,
    '0014': 167779,
    '0015': 180184,
    '0016': 178277,
    '0017': 166530,
    '0018': 135803,
    '0019': 160573,
    '0020': 161081,
    '0021': 158213,
    '0022': 173673,
    '0024': 151885,
    '0029': 168940,
    '0035': 199469,
    '0036': 272297,
    '0037': 135168,
    '0038': 135423,
    '0039': 165791,
    '0040': 171925,
    '0041': 319976,
    '0042': 268334,
    '0043': 52637,
    '0044': 148105,
}

longest_genome = float(max(genome_len.values()))

pos_is26 = {
	'0001': ((35928, 36746), (39229, 40048), (151907, 152726)),
    '0005': ((114568, 115387), (118914, 119733), (125526, 126345)),
    '0007': ((156624, 157443), (31272, 32091), (44315, 45134), (136266, 137085),
        (43071,43890), (38573, 39392), (145083, 145902), (33104, 33923), (149429, 150248)),
    '0008': ((5389, 6208), (4347, 5166), (1, 820)),
    '0009': ((362, 1181), (12947, 13766),(11703, 12522), (6540, 7359), (2194, 3013)),
    '0010': ((20337, 21156), (141275, 142094), (19093, 19912)),
    '0011': ((12304, 13123), (19277, 20096), (1460, 2279)),
    '0014': ((117640, 118459), (110574, 111393), (112434, 113253)),
    '0015': ((4517, 5336), (19042, 19861), (150016, 150835), (25598, 26417), (23738, 24557),
        (179365, 180184), (165323, 166142), (165323, 166142)),
    '0016': ((157299, 158118), (20336, 21155), (19093, 19912), (127230, 128049), (113483,114302)),
    '0017': ((22025, 22844), (131331, 132150), (20781, 21600)),
    '0018': ((25181, 26000), (23937, 24756), (18568, 19387)),
    '0019': ((20337, 21156), (126141, 126959), (19093, 19912)),
    '0020': ((20337, 21156), (125881, 126700), (19094, 19913)),
    '0021': ((20337, 21156), (123015, 123834), (19093, 19912)),
    '0022': ((25979, 26798), (24731, 25550)),
    '0024': ((17257, 18076),),
    '0029': ((30894, 31713), (47198, 48017), (52553, 53372), (59526, 60345), (45954, 46773),
        (41608, 42427), (39389, 40208), (32726, 33545)),
    '0035': ((19220, 20039), (137161, 137980), (13976, 18795)),
    '0036': ((176068, 176887), (160010, 160829), (163663, 164482), (167558, 168377), (60970, 61789), (211083, 211906), (219904,220723), (32816, 33635)),
    '0037': ((22056, 22875), (87666, 88485), (20812, 21631), (100736, 101555)),
    '0038': ((21996, 22815), (100678, 101497), (20752, 21571), (87605, 88427)),
    '0039': ((1, 820), (53526, 54345), (147857, 148643)),
    '0040': ((143281, 144100), (45916, 46734)),
    '0041': ((223747, 224566), (207689, 208508), (211342, 212161), (215237, 216056), (60970, 61789), (258766, 259585), (267583, 268402), (32816, 33635)),
    '0042': ((176079, 176898), (160021, 160840), (163674, 164493), (211098, 211917), (219915, 220734), (32816, 33635)),
    '0043': ((49405, 50224), (36081, 36900), (40427, 41246)),
    '0044': ((20337, 21156), (106856, 107675), (19093, 19912), (108718, 109537), (113663, 114482)),
}

fig = plt.figure(figsize=(6,4))
ax = plt.axes([0,0,1,1])

# create 1 x N (number of chromosomes) grid to plot the chromosomes
N = len(genome_len)
pos = np.mgrid[0:1:1, 0:1:1.0/N].reshape(2, -1)

# leave some blank space at the border
xshift = 0.03
yshift = 0.1

# add one line for each chromosome
for k, v in genome_len.items():
    count = 1
    # calculate line length proportional to the chromosome length
    x, y = np.array([[xshift, xshift+(1-2*xshift)*v/longest_genome], [yshift, yshift]])
    line = mlines.Line2D(x+pos[0, N-count], y+pos[1, N-count], lw=5, alpha=0.2, color='k')
    plt.text(xshift+pos[0, N-count], yshift+pos[1, N-count]-0.05, 'genome %d' % count, ha='left', size=14)
    ax.add_line(line)
    count += 1

# add one short colored arrow for each data point
colors = ('orange','red')
print pos_is26
#all_positions = (pos_is26)
for positions, color in zip(pos_is26, colors):

    for k, v in positions.items():
        for start, end in v:
            x,y = xshift+(1-2*xshift)*start/longest_genome, yshift
            # xoffset is the direction and length of the arrow
            if strand == '+':
                xoffset = 0.02
            else:
                xoffset = -0.02
            arrow = mpatches.Arrow(x+pos[0,N-k], y+pos[1,N-k],
                xoffset, 0, width=0.1,color=color)
            ax.add_patch(arrow)

ax.set_xticks([])
ax.set_yticks([])

plt.show()
#plt.savefig('positions.png')